// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["studiogdo/listCellForm", "studiogdo/listSelectionForm"], function(DefaultCellForm, DefaultSelectionForm) {
    var ListAndSelection;
    return ListAndSelection = (function() {
      var BooleanEditForm, CentEditForm;

      function ListAndSelection(list, selected, list_skel, selected_skel, CellForm, SelectionForm) {
        this.list = list;
        this.selected = selected;
        this.list_skel = list_skel;
        this.selected_skel = selected_skel;
        this.CellForm = CellForm;
        this.SelectionForm = SelectionForm;
        this.deleteBOCallback = __bind(this.deleteBOCallback, this);
        this.deleteCallback = __bind(this.deleteCallback, this);
        this.addDeleteButtons = __bind(this.addDeleteButtons, this);
        this.fnSettings = __bind(this.fnSettings, this);
        this.setDataTable = __bind(this.setDataTable, this);
        this.showListBOCallback = __bind(this.showListBOCallback, this);
        this.showListCallback = __bind(this.showListCallback, this);
        this.showList = __bind(this.showList, this);
        this.inlineEditSelectedCallback = __bind(this.inlineEditSelectedCallback, this);
        this.commitSelectedCallback = __bind(this.commitSelectedCallback, this);
        this.commitSelected = __bind(this.commitSelected, this);
        this.closeSelectedCallback = __bind(this.closeSelectedCallback, this);
        this.closeSelected = __bind(this.closeSelected, this);
        this.showSelectedBOCallback = __bind(this.showSelectedBOCallback, this);
        this.showSelectedCallbackBOCall = __bind(this.showSelectedCallbackBOCall, this);
        this.showSelectedCallback = __bind(this.showSelectedCallback, this);
        this.showSelected = __bind(this.showSelected, this);
        this.selectLine = __bind(this.selectLine, this);
        this.path = null;
        this.selectedPath = null;
        this.bDataTable = true;
        this.sSelectionClass = "selected";
        this.sSelectionEvent = "click";
        this.sEditionEvent = "dblclick";
        this.jCellForm = null;
        this.jSelectionForm = null;
      }

      ListAndSelection.prototype.selectLine = function(selected_tr) {
        var tr, _i, _len, _ref;
        _ref = this.list.querySelectorAll("tr");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tr = _ref[_i];
          tr.classList.remove(this.sSelectionClass);
        }
        return selected_tr.classList.add(this.sSelectionClass);
      };

      ListAndSelection.prototype.showSelected = function(data) {
        return this.showSelectedCallback(null, data);
      };

      ListAndSelection.prototype.showSelectedCallback = function(evt, data) {
        var path, tr;
        if (this.jSelectionForm == null) {
          if (this.SelectionForm != null) {
            this.jSelectionForm = new this.SelectionForm(this);
          } else {
            this.jSelectionForm = new DefaultSelectionForm(this);
          }
        }
        if (evt != null) {
          evt.preventDefault();
          tr = getParentByTagName(evt.target, "TR", true);
          this.selectLine(tr);
          path = tr.dataset.apath;
        } else {
          tr = this.list.querySelector("tr." + this.sSelectionClass);
          if (tr != null) {
            path = tr.dataset.apath;
          } else {
            path = this.jSelectionForm.path;
          }
        }
        if (path == null) {
          return;
        }
        this.selectedPath = path;
        return this.showSelectedCallbackBOCall(evt, data);
      };

      ListAndSelection.prototype.showSelectedCallbackBOCall = function(evt, data) {
        var bocall;
        bocall = new BOCall;
        bocall.done = (function(_this) {
          return function() {
            return _this.showSelectedBOCallback(bocall, evt);
          };
        })(this);
        return bocall.postFacet(this.selectedPath, this.jSelectionForm.skel, "html5", data);
      };

      ListAndSelection.prototype.showSelectedBOCallback = function(bocall, evt) {
        if (this.selected == null) {
          alert('No selection holder defined for the list');
          return;
        }
        if (bocall != null) {
          $(this.selected).html(bocall.responseText);
        }
        if (this.jSelectionForm != null) {
          return this.jSelectionForm.showSelectedCallback(this.selected);
        }
      };

      ListAndSelection.prototype.closeSelected = function() {
        return this.closeSelectedCallback();
      };

      ListAndSelection.prototype.closeSelectedCallback = function() {
        this.jSelectionForm = null;
        return this.selected.innerHTML = "";
      };

      ListAndSelection.prototype.commitSelected = function(map) {
        return this.commitSelectedCallback(map);
      };

      ListAndSelection.prototype.commitSelectedCallback = function(map) {
        var data, key, value;
        data = new FormData(this.selected.querySelector("form"));
        for (key in map) {
          value = map[key];
          data.append(key, value);
        }
        return this.showList(this.path, data, this.closeSelected);
      };

      ListAndSelection.prototype.inlineEditSelectedCallback = function(evt) {
        var form, span, td, _ref;
        td = evt.currentTarget;
        $(td).one(this.sEditionEvent, this.inlineEditSelectedCallback);
        span = td.querySelector("span");
        if (span == null) {
          return;
        }
        form = td.querySelector("form");
        if (form == null) {
          return;
        }
        if (span.innerText === '') {
          form.classList.remove("hidden");
        }
        if ((_ref = this.jCellForm) != null) {
          _ref.close();
        }
        if (this.CellForm != null) {
          return this.jCellForm = new this.CellForm(this, span, form);
        } else {
          this.jCellForm = new DefaultCellForm(this, span, form);
          this.jCellForm.firstFocus();
          return this.jCellForm.commit = (function(_this) {
            return function(evt, list) {
              var fdata;
              fdata = new FormData(form);
              _this.showList(_this.path, fdata);
              return _this.jCellForm = null;
            };
          })(this);
        }
      };

      ListAndSelection.prototype.showList = function(path, data, after) {
        var bocall;
        if (path != null) {
          if (this.path == null) {
            this.path = path;
          }
        }
        if (path == null) {
          path = this.path;
        }
        if (this.list_skel == null) {
          this.showListBOCallback();
          return;
        }
        bocall = new BOCall;
        bocall.done = (function(_this) {
          return function() {
            _this.showListBOCallback(bocall);
            return typeof after === "function" ? after() : void 0;
          };
        })(this);
        return bocall.postFacet(path, this.list_skel, "html5", data);
      };

      ListAndSelection.prototype.showListCallback = function(oSettings) {
        var date, i, nbaff, nbsel, span, td, tr, twarn, val, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _results;
        if (this.list.querySelector("#nbaff span") != null) {
          nbaff = this.list.querySelector("#nbaff span").innerHTML;
        }
        if (this.list.querySelector("#nbsel span") != null) {
          nbsel = this.list.querySelector("#nbsel span").innerHTML;
        }
        twarn = this.list.querySelector("#table_limit_warn");
        if (nbaff !== nbsel) {
          if (twarn != null) {
            twarn.innerHTML = "Attention, la limite d’affichage a été atteinte (" + nbaff + " lignes maximum)";
          }
        }
        _ref = $("tbody tr, tfoot tr", this.list);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tr = _ref[_i];
          if (!(!$(tr).hasClass("initialized"))) {
            continue;
          }
          if ((this.sSelectionEvent != null) && (this.selected_skel != null)) {
            $(tr).on(this.sSelectionEvent, this.showSelectedCallback);
          }
          if (this.sEditionEvent != null) {
            _ref1 = $("td.editable", tr);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              td = _ref1[_j];
              $(td).one(this.sEditionEvent, this.inlineEditSelectedCallback);
            }
          }
          _ref2 = $("td.euro span, td span.euro", tr);
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            span = _ref2[_k];
            val = $(span).text();
            $(span).text(numeral(val).format('0,0 $'));
          }
          _ref3 = $("td.cent span, td span.cent", tr);
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            span = _ref3[_l];
            val = $(span).text() / 100;
            $(span).text(numeral(val).format('0,0.00 $'));
          }
          _ref4 = $("td.date span, td span.date", tr);
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            span = _ref4[_m];
            date = moment($(span).text());
            if (date.isValid()) {
              moment($(span).text()).lang();
              $(span).text(date.format('L'));
            }
          }
          _ref5 = $("td.time span, td span.time", tr);
          for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
            span = _ref5[_n];
            date = moment($(span).text(), ['HH:mm', 'HH:mm:ss', 'hh:mm', 'hh:mm:ss']);
            if (date.isValid()) {
              $(span).text(date.format('LT'));
            }
          }
          _ref6 = $("td.datetime span, td span.datetime", tr);
          for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
            span = _ref6[_o];
            date = moment($(span).text());
            if (date.isValid()) {
              $(span).text(date.format('LLL'));
            }
          }
          _ref7 = $("td.boolean span", tr);
          for (_p = 0, _len7 = _ref7.length; _p < _len7; _p++) {
            span = _ref7[_p];
            $(span).hide();
            i = $("<i></i>").appendTo($(span).parent());
            val = $(span).text();
            if (val === 'true') {
              i.addClass("icon-ok");
            } else {
              i.addClass("icon-plus-sign");
            }
          }
          _results.push($(tr).addClass("initialized"));
        }
        return _results;
      };

      ListAndSelection.prototype.showListBOCallback = function(bocall) {
        if ((bocall != null) && (this.list != null)) {
          this.list.innerHTML = bocall.responseText;
        }
        if (this.selected != null) {
          this.selected.innerHTML = "";
        }
        return this.setDataTable();
      };

      ListAndSelection.prototype.setDataTable = function() {
        var table;
        if (this.bDataTable) {
          table = $("table", this.list);
          if (table.length === 0) {
            table = $("table", this.list.parentNode);
          }
          return table.dataTable(this.fnSettings());
        } else {
          return this.showListCallback();
        }
      };

      ListAndSelection.prototype.fnSettings = function() {
        return {
          "aaSorting": [],
          'aLengthMenu': [[10, 25, 100, 500, -1], [10, 25, 100, 500, 'Tous']],
          "bStateSave": true,
          "bLengthChange": true,
          "iDisplayLength": 10,
          "fnDrawCallback": this.showListCallback,
          "sDom": "Tlfrtip<'clear'>",
          "sPaginationType": "full_numbers",
          "oLanguage": {
            "sLengthMenu": "Afficher _MENU_ lignes par page",
            "sZeroRecords": "Pas trouvé..",
            "sInfo": "Affichage de _START_ à _END_ sur _TOTAL_ lignes",
            "sInfoEmpty": "Affichage de 0 à 0 sur 0 lignes",
            "sInfoFiltered": "(filtrage sur _MAX_ lignes)",
            "sSearch": "Rechercher",
            "oPaginate": {
              "sFirst": "&nbsp;&nbsp;&nbsp;",
              "sLast": "&nbsp;&nbsp;&nbsp;",
              "sNext": "&nbsp;&nbsp;&nbsp;",
              "sPrevious": "&nbsp;&nbsp;&nbsp;"
            }
          }
        };
      };

      ListAndSelection.prototype.addDeleteButtons = function(msg, where) {

        /*
        Adds delete button on each line.
        Should be added after showListCallback
            showListCallback: (oSettings) =>
            super(oSettings)
            @addDeleteButtons()
         */
        var askConfirmation, button, td, _i, _len, _ref, _results;
        if (msg == null) {
          msg = "Voulez-vous réellement faire cette action?";
        }
        if (where == null) {
          where = "tbody tr > td:last-child";
        }
        askConfirmation = (function(_this) {
          return function(evt) {
            var res;
            if (evt != null) {
              evt.stopImmediatePropagation();
              evt.preventDefault();
            }
            res = confirm("Confirmation : " + msg);
            if (res) {
              return _this.deleteCallback(evt);
            }
          };
        })(this);
        _ref = this.list.querySelectorAll(where);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          td = _ref[_i];
          if (!(!(td.classList.contains("dataTables_empty") || td.classList.contains("delete_button")))) {
            continue;
          }
          button = document.createElement('BUTTON');
          button.setAttribute('style', 'float: right;');
          button.innerHTML = '<img alt="Détruire" title="Détruire" src="/shared/css/images/btn_del.png"/>';
          td.appendChild(button);
          td.classList.add("delete_button");
          _results.push(button.addEventListener("click", askConfirmation, true));
        }
        return _results;
      };

      ListAndSelection.prototype.deleteCallback = function(evt) {
        var bocall, button, tr;
        button = evt.currentTarget;
        tr = getParentByTagName(button, "TR");
        bocall = new BOCall;
        bocall.applyCommand(tr.dataset.apath, "Unplug");
        return bocall.done = (function(_this) {
          return function() {
            return _this.deleteBOCallback(bocall);
          };
        })(this);
      };

      ListAndSelection.prototype.deleteBOCallback = function(bocall) {
        return this.showList(this.path);
      };

      BooleanEditForm = (function(_super) {
        __extends(BooleanEditForm, _super);

        function BooleanEditForm() {
          this.commit = __bind(this.commit, this);
          BooleanEditForm.__super__.constructor.apply(this, arguments);
          this.firstFocus();
        }

        BooleanEditForm.prototype.commit = function(evt, list) {
          var bo, input, td;
          list.editForm = null;
          td = getParentByTagName(evt.target, "TD", true);
          if (!td.classList.contains("boolean")) {
            BooleanEditForm.__super__.commit.apply(this, arguments);
            return;
          }
          bo = new BOCall;
          bo.done = (function(_this) {
            return function() {
              return _this.value.innerHTML = bo.responseText;
            };
          })(this);
          input = evt.target.tagName === 'INPUT' ? evt.target : evt.target.querySelector('INPUT');
          bo.appendBOParam("i_" + td.dataset.apath, input.value);
          return bo.postProp(td.dataset.apath);
        };

        return BooleanEditForm;

      })(DefaultCellForm);

      CentEditForm = (function(_super) {
        __extends(CentEditForm, _super);

        function CentEditForm() {
          this.commit = __bind(this.commit, this);
          CentEditForm.__super__.constructor.apply(this, arguments);
          this.firstFocus();
        }

        CentEditForm.prototype.commit = function(evt, list) {
          var bo, input, td;
          list.editForm = null;
          td = getParentByTagName(evt.target, "TD", true);
          if (!td.classList.contains("cent")) {
            CentEditForm.__super__.commit.apply(this, arguments);
            return;
          }
          bo = new BOCall;
          bo.done = (function(_this) {
            return function() {
              return _this.value.innerHTML = bo.responseText;
            };
          })(this);
          input = evt.target.tagName === 'INPUT' ? evt.target : evt.target.querySelector('INPUT');
          bo.appendBOParam("i_" + td.dataset.apath, input.value);
          return bo.postProp(td.dataset.apath);
        };

        return CentEditForm;

      })(DefaultCellForm);

      return ListAndSelection;

    })();
  });

}).call(this);

//# sourceMappingURL=listAndSelection.map
