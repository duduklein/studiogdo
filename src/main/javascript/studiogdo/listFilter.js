// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var ListFilter;
    return ListFilter = (function() {
      function ListFilter(filter, filter_skel) {
        this.filter = filter;
        this.filter_skel = filter_skel;
        this.onKeypress = __bind(this.onKeypress, this);
        this.show = __bind(this.show, this);
        this.reset = __bind(this.reset, this);
        this.filterCallback = __bind(this.filterCallback, this);
        this.filterBOCallback = __bind(this.filterBOCallback, this);
        this.showFilter = __bind(this.showFilter, this);
        this.startShow = false;
      }

      ListFilter.prototype.showFilter = function() {
        var bocall,
          _this = this;
        if (this.filter == null) {
          return;
        }
        bocall = new BOCall;
        bocall.done = function() {
          return _this.filterBOCallback(bocall);
        };
        return bocall.postFacet(null, this.filter_skel, "html5");
      };

      ListFilter.prototype.filterBOCallback = function(bocall) {
        var elem, label, _i, _len, _ref,
          _this = this;
        this.filter.innerHTML = bocall.responseText;
        this.form = $("form", this.filter).get(0);
        $('#plus', this.filter).on("click", function(evt) {
          if (evt != null) {
            evt.preventDefault();
          }
          return _this.show(true);
        });
        $('#moins', this.filter).on("click", function(evt) {
          if (evt != null) {
            evt.preventDefault();
          }
          _this.reset();
          _this.filterCallback(evt);
          return _this.show(false);
        });
        $('#go', this.filter).on("click", function(evt) {
          if (evt != null) {
            evt.preventDefault();
          }
          _this.filterCallback(evt);
          return _this.show(false);
        });
        $(this.form).on('submit', this.filterCallback);
        $(this.form).on('keypress', this.onKeypress);
        _ref = $('label');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          label = _ref[_i];
          if (!(label.htmlFor !== '')) {
            continue;
          }
          elem = document.getElementById(label.htmlFor);
          if (elem != null) {
            elem.label = label;
          }
        }
        return this.show(this.startShow);
      };

      ListFilter.prototype.filterCallback = function(evt) {
        if (evt != null) {
          evt.preventDefault();
        }
        return alert('filer to be done');
      };

      ListFilter.prototype.reset = function() {
        var input, option, select, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
        _ref = $("input", this.form);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          if (input.id !== 'nbre_ligne') {
            input.value = '';
          }
        }
        _ref1 = $("select", this.form);
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          select = _ref1[_j];
          _ref2 = $("option", select);
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            option = _ref2[_k];
            option.selected = false;
          }
          _results.push(select.querySelector("option").selected = true);
        }
        return _results;
      };

      ListFilter.prototype.show = function(all) {
        var br, hide, input, select, show, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
        hide = function(elt) {
          $(elt).hide();
          $(elt.label).hide();
          return $($(elt).parent().get(0).label).hide();
        };
        show = function(elt) {
          $(elt).show();
          $(elt.label).show();
          return $($(elt).parent().get(0).label).show();
        };
        _ref = $("INPUT", this.form);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          input = _ref[_i];
          if (input.getAttribute("type") === "checkbox") {
            if (!all && input.getAttribute("checked") !== "checked") {
              hide(input);
            } else {
              if (input.id !== "") {
                show(input);
              }
            }
          } else {
            if (!all && input.value === "") {
              hide(input);
            } else {
              show(input);
            }
          }
        }
        _ref1 = $("select", this.form);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          select = _ref1[_j];
          if (!all && select.querySelectorAll("option[selected]").length === 0) {
            hide(select);
          } else {
            show(select);
          }
        }
        _ref2 = $("br", this.form);
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          br = _ref2[_k];
          if (all) {
            _results.push($(br).show());
          } else {
            _results.push($(br).hide());
          }
        }
        return _results;
      };

      ListFilter.prototype.onKeypress = function(evt) {
        if (evt.which === 13) {
          return this.filterCallback(evt);
        }
      };

      return ListFilter;

    })();
  });

}).call(this);

/*
//@ sourceMappingURL=listFilter.map
*/
